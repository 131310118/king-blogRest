#使用的用户和组
user  root;

#指定工作衍生进程数（一般等于CPU的总核数）
worker_processes  1;

#指定错误日志存放的路径，错误日志记录级别可选项为[ debug | info | notice | warn | error | crit ]
error_log  /usr/local/nginx/logs/error.log warn;

#指定pid存放的路径，该文件是一个纯文本文件，里面记录的是进程的pid号
pid        /usr/local/nginx/logs/nginx.pid;

#指定文件描述符数量
#worker_rlimit_nofile 51200

events {

	#使用的网络I/O模型，Linux系统推荐采用epoll模型，FreeBSD系统推荐采用kqueue模型
	#use epoll;
	
	#允许的连接数（单进程）
    worker_connections  1024;
}


http {
    include       /usr/local/nginx/conf/mime.types;
    default_type  application/octet-stream;
	
	#设置使用的字符集，如果一个网站有许多字符集，请不要随便设置，应让程序员在HTML代码中通过Meta标签设置
	#charset gb2312;
	
	#设置客户端能够上传的文件大小
	#client_max_body_size 8m;

	#缓冲区代理缓冲用户端请求的最大字节数，可以理解为先保存到本地再传给用户
	#client_body_buffer_size 128k;

	#跟后端服务器连接的超时时间——发起握手等候响应超时时间
	#proxy_connect_timeout 600;

	#连接成功后——等待后端服务器响应时间——其实已经进入后端的排队之中等候处理
	#proxy_read_timeout 600;

	#后端服务器数据回传时间——就是在规定时间内后端服务器必须传回所有的数据
	#proxy_send_timeout 600;

	#代理请求缓存区——这个缓存区间会保存用户的头信息以供Nginx进行规则处理——一般只要保存下头信息即可
	#proxy_buffer_size 16k;

	#同上 告诉Nginx保存单个用的几个Buffer 最大用多大空间
	#proxy_buffers 4 32k;

	#如果系统很忙的时候可以申请更大的proxy_buffers 官方推荐
	#proxy_busy_buffers_size 64k;

	#proxy缓存临时文件的大小
	#proxy_temp_file_write_size 64k;

	#设置日志的记录格式，main是定义的格式名称，后面每段字符串表示定义的格式样式
	#$remote_addr和$http_x_forwarded_for用于记录IP地址；$remote_user用于记录远程客户端用户名称；
	#$time_local用于记录访问时间与时区；$request用于记录请求URL与HTTP协议；$status用于记录请求状态；
	#$body_bytes_sent用于记录发送给客户端的文件主体内容大小；$http_referer用于记录是从哪个页面链接访问过来的；
	#$http_user_agent用于记录客户端浏览器的相关信息
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #访问日志文件存放路径 这里的main对应上面的log_format的名称
    access_log  /usr/local/nginx/logs/access.log  main;
	
	#主要用来设置含有变量的日志路径的文件描述符缓存,max:设置缓存中的最大文件描述符数量。如果
	#超过设置的最大文件描述符数量，则采用LRU算法清楚“较不常使用的文件描述符”。LRU（Least Recently Used）
	#算法的基本概念是：当内存缓存区剩余的可用空间不够时，缓冲区尽可能地先保留使用者最常使用的数据，将最近
	#未使用的数据移除内存，腾出空间来加载另外的数据。
	#inactive：设置一个时间，如果在设置的时间内没有使用此文件描述符，则自动删除此描述符。此参数可选，默认10s。
	#min_uses：在参数inactive指定的时间范围内，如果日志文件超过被使用的次数，则将该文件的描述符计入缓存。默认为1。
	#valid：设置多长时间检查一次，看一看变量指定的日志文件路径与文件名是否仍然存在。默认1m。
	#open_log_file_cache max=1000 inactive=20s min_uses=2 valid=1m;

    #设置缓存文件的存放路径,levels指定缓存空间有几层hash目录，这里表示第一层目录一个字母，第二层目录两个字母
    #keys_zoon为这个缓存区起名，这里的500m指内存缓存空间大小为200m;inactive表示如果缓存文件在规定时间内没有被访问将被删除
    #max_size是指硬盘缓存空间。
    proxy_cache_path /root/myblogRest/proxy_cache_dir levels=1:2 keys_zone=static:200m inactive=1d max_size=30g;

	#负载均衡
    #upstream backend {
    #	server backend1.example.com weight=5;
    #	server backend2.example.com:8080 weight=5;
    #}

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

	#开启gzip压缩
    #gzip  on;

    #include /etc/nginx/conf.d/*.conf;

    #虚拟主机
    server {

    	#监听的IP和端口
        listen       80;

    	#主机名称
        server_name  www.kingrest.org;

        #charset koi8-r;

    	#访问日志文件存放路径
        #access_log  /var/log/nginx/log/host.access.log  main;

        #location / {
        #	自动列目录
        #	autoindex on;
        #	设定索引时文件大小的单位
        #	autoindex_exact_size on;
        #	以本地时间（GMT）来显示文件时间，默认为off
        #	autoindex_localtime off;
        #}

    	#用于清除缓存
    	location ~ /purge(/.*) {
    	    #设置允许通过的IP或IP段才可以清除
    	    #allow 127.0.0.1;
    	    #deny all;
    	    proxy_cache_purge static $host$1$is_args$args;
    	}

        location ~ /(img|js|html|css|fonts)/ {
        	#浏览器本地缓存
        	expires max;
    	    #设置哪个缓存区将被使用，static是缓存区的名称，对应proxy_cache_path
    	    proxy_cache static;

    	    #设置缓存哪些HTTP方法,默认缓存HTTP GET/HEAD方法，不缓存HTTP POST方法
    	    #proxy_cacha_methods GET

    	    #设置缓存的最小使用次数
    	    #proxy_cache_min_uses 1;

    	    #对不同返回状态码的URL设置不同的缓存时间
    	    proxy_cache_valid 200 304 12h;
    	    proxy_cache_valid 301 302 1m;
    	    proxy_cache_valid any 1m;

    	    #设置Web缓存的Key值，Nginx根据Key值md5哈希存储缓存。一般根据$host(域名)、$request_uri(请求的路径)等变量组合成proxy_cache_key
    	    proxy_cache_key "$host$uri$is_args$args";

    	    #反向代理，访问内容源服务器
    	    proxy_set_header Host '127.11.11.11';
    	    proxy_set_header X-Forward-For $remote_addr;
    	    proxy_pass http://127.11.11.11:80;
    	}

    	location /api/ {
    		proxy_pass http://localhost:3000;
    		proxy_set_header 		   Host $host;
    		proxy_set_header	       X-Real-IP   $remote_addr;
            proxy_set_header	       X-Forwarded-For $proxy_add_x_forwarded_for;
    	}

    	location / {
    		#root /root/myblog/;
			root  /root/myblogRest/;

    		#默认文件，顺序从左到右
    		index /html/index.html;
    	}

    	#location /wrong {
    	#	retrun 404;
    	#}

    	#location /moved {
    	#	return 301 http://localhost/index.html;
    	#}

    	#location /users/ {
    	#	rewrite ^/users/(.*)$ /show?user=$1 break;
    	#}

    	#location /old/path.html {
    	#	error_page 404 =301 http:localhost/new/path.html;
    	#}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
	
	#server {
    #    listen       8080;
    #    server_name  www.king.org;
    #	location ~ /purge(/.*) {
    #	    proxy_cache_purge static $host$1$is_args$args;
    #	}

    #    location ~ /(img|js|html|css|fonts)/ {
    #    	expires max;
    #	    proxy_cache static;
    #	    proxy_cache_valid 200 304 12h;
    #	    proxy_cache_valid 301 302 1m;
    #	    proxy_cache_valid any 1m;
	#		proxy_cache_key "$host$uri$is_args$args";
    #	    proxy_set_header Host '127.22.22.22';
    #	    proxy_set_header X-Forward-For $remote_addr;
    #	    proxy_pass http://127.22.22.22:8080;
    #	}

    #	location /api/ {
    #		proxy_pass http://localhost:3000;
    #	}

    #	location / {
    #		root /root/myblog/;

    #		#默认文件，顺序从左到右
    #		#index index.html index.htm;
    #	}

    #    error_page   500 502 503 504  /50x.html;
    #    location = /50x.html {
    #        root   html;
    #    }
    #}

    #server {
    #    listen 8080;
    #    server_name 127.22.22.22;

    #    location / {
	#		root  /root/myblog/;
    #    }

    #    error_page   500 502 503 504  /50x.html;
    #    location = /50x.html {
    #        root   html;
    #    }
    #}
	
    server {
        listen 80;
        server_name 127.11.11.11;

        location / {
            #root  /root/myblog/;
			root  /root/myblogRest/;
			
			index /root/myblogRest/html/index.html;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
